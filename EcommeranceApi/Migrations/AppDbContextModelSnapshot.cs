// <auto-generated />
using System;
using Ecommerance.Infrastucture.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommeranceApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ecommerance.Core.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a18fd658-344b-435c-ab09-fe744303f38e"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 926, DateTimeKind.Utc).AddTicks(2164),
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 926, DateTimeKind.Utc).AddTicks(2171),
                            Name = "Koszulki",
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageColorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e38d0ddc-8c81-451a-8180-5e9d34804ee4"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 925, DateTimeKind.Utc).AddTicks(3583),
                            Description = "jasno żółty",
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 925, DateTimeKind.Utc).AddTicks(3591),
                            HexCode = "#2423",
                            ImageColorUrl = "/color.jpg",
                            Name = "Żółty"
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsAvaible")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductDefinitionId");

                    b.HasIndex("SizeId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33820b19-3c18-4769-b518-4ffaa341af32"),
                            CategoryId = new Guid("a18fd658-344b-435c-ab09-fe744303f38e"),
                            ColorId = new Guid("e38d0ddc-8c81-451a-8180-5e9d34804ee4"),
                            ColorValue = "żółty",
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 926, DateTimeKind.Utc).AddTicks(8960),
                            Discount = 0.0,
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 926, DateTimeKind.Utc).AddTicks(8967),
                            IsAvaible = 1,
                            Price = 109.0,
                            ProductDefinitionId = new Guid("e561c011-79b4-4c97-ae1e-b961de87ad3f"),
                            SizeId = new Guid("0641b61a-839a-4061-9152-ae40a3613697"),
                            SizeValue = "S"
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.ProductAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductAvailability");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a139ceb8-01ef-44d5-a95c-241ae2eb9875"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 927, DateTimeKind.Utc).AddTicks(3402),
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 927, DateTimeKind.Utc).AddTicks(3410),
                            ProductId = new Guid("33820b19-3c18-4769-b518-4ffaa341af32"),
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.ProductDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Collection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsAvaible")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductDefinition");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e561c011-79b4-4c97-ae1e-b961de87ad3f"),
                            Collection = "2020 summer",
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 925, DateTimeKind.Utc).AddTicks(9178),
                            Description = "Bawełniana koszulka z nadrukiem",
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 925, DateTimeKind.Utc).AddTicks(9185),
                            IsAvaible = 1,
                            Mark = "Stussy",
                            Name = "Koszulka Stussy"
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.ProductFoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDefinitionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFoto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("956c1204-68e6-45b1-b5a7-d38a5bc52ba9"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 927, DateTimeKind.Utc).AddTicks(8328),
                            Description = "Koszulka nike",
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 927, DateTimeKind.Utc).AddTicks(8335),
                            FotoUrl = "https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,b_rgb:f5f5f5/syjv2pftag56ak1oy7mx/meska-domowa-koszulka-pilkarska-fc-Q8x1XQ.jpg",
                            Index = 1,
                            ProductDefinitionId = new Guid("e561c011-79b4-4c97-ae1e-b961de87ad3f"),
                            ProductId = new Guid("33820b19-3c18-4769-b518-4ffaa341af32")
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0641b61a-839a-4061-9152-ae40a3613697"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 924, DateTimeKind.Utc).AddTicks(8656),
                            Description = "rozmiar S",
                            Details = "",
                            EditedAt = new DateTime(2020, 9, 27, 14, 43, 29, 924, DateTimeKind.Utc).AddTicks(8675),
                            Name = "S"
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60e67526-1865-466c-85d2-54ac144437c4"),
                            CreatedAt = new DateTime(2020, 9, 27, 14, 43, 29, 922, DateTimeKind.Utc).AddTicks(7409),
                            EditedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@wp.pl",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "t@blet2009",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.Product", b =>
                {
                    b.HasOne("Ecommerance.Core.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerance.Core.Domain.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerance.Core.Domain.ProductDefinition", "ProductDefinition")
                        .WithMany("Products")
                        .HasForeignKey("ProductDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerance.Core.Domain.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.ProductAvailability", b =>
                {
                    b.HasOne("Ecommerance.Core.Domain.Product", "Product")
                        .WithOne("ProductAvailability")
                        .HasForeignKey("Ecommerance.Core.Domain.ProductAvailability", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerance.Core.Domain.ProductFoto", b =>
                {
                    b.HasOne("Ecommerance.Core.Domain.ProductDefinition", "ProductDefinition")
                        .WithMany("ProductFoto")
                        .HasForeignKey("ProductDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerance.Core.Domain.Product", "Product")
                        .WithMany("ProductFotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
